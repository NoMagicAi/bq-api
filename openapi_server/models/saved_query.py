# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server.models.query_param import QueryParam
from openapi_server import util

from openapi_server.models.query_param import QueryParam  # noqa: E501

class SavedQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, slug=None, sql=None, params=None):  # noqa: E501
        """SavedQuery - a model defined in OpenAPI

        :param slug: The slug of this SavedQuery.  # noqa: E501
        :type slug: str
        :param sql: The sql of this SavedQuery.  # noqa: E501
        :type sql: str
        :param params: The params of this SavedQuery.  # noqa: E501
        :type params: List[QueryParam]
        """
        self.openapi_types = {
            'slug': str,
            'sql': str,
            'params': List[QueryParam]
        }

        self.attribute_map = {
            'slug': 'slug',
            'sql': 'sql',
            'params': 'params'
        }

        self._slug = slug
        self._sql = sql
        self._params = params

    @classmethod
    def from_dict(cls, dikt) -> 'SavedQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SavedQuery of this SavedQuery.  # noqa: E501
        :rtype: SavedQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def slug(self):
        """Gets the slug of this SavedQuery.

        Slug of a query (URL-friendly name)  # noqa: E501

        :return: The slug of this SavedQuery.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this SavedQuery.

        Slug of a query (URL-friendly name)  # noqa: E501

        :param slug: The slug of this SavedQuery.
        :type slug: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def sql(self):
        """Gets the sql of this SavedQuery.

        Query SQL code  # noqa: E501

        :return: The sql of this SavedQuery.
        :rtype: str
        """
        return self._sql

    @sql.setter
    def sql(self, sql):
        """Sets the sql of this SavedQuery.

        Query SQL code  # noqa: E501

        :param sql: The sql of this SavedQuery.
        :type sql: str
        """
        if sql is None:
            raise ValueError("Invalid value for `sql`, must not be `None`")  # noqa: E501

        self._sql = sql

    @property
    def params(self):
        """Gets the params of this SavedQuery.

        If query is parametized, here is the list of params used  # noqa: E501

        :return: The params of this SavedQuery.
        :rtype: List[QueryParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this SavedQuery.

        If query is parametized, here is the list of params used  # noqa: E501

        :param params: The params of this SavedQuery.
        :type params: List[QueryParam]
        """

        self._params = params
