# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class QueryResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, executed_sql=None, error=None, data=None):  # noqa: E501
        """QueryResult - a model defined in OpenAPI

        :param executed_sql: The executed_sql of this QueryResult.  # noqa: E501
        :type executed_sql: str
        :param error: The error of this QueryResult.  # noqa: E501
        :type error: str
        :param data: The data of this QueryResult.  # noqa: E501
        :type data: List[object]
        """
        self.openapi_types = {
            'executed_sql': str,
            'error': str,
            'data': List[object]
        }

        self.attribute_map = {
            'executed_sql': 'executed_sql',
            'error': 'error',
            'data': 'data'
        }

        self._executed_sql = executed_sql
        self._error = error
        self._data = data

    @classmethod
    def from_dict(cls, dikt) -> 'QueryResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryResult of this QueryResult.  # noqa: E501
        :rtype: QueryResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def executed_sql(self):
        """Gets the executed_sql of this QueryResult.

        SQL that was executed  # noqa: E501

        :return: The executed_sql of this QueryResult.
        :rtype: str
        """
        return self._executed_sql

    @executed_sql.setter
    def executed_sql(self, executed_sql):
        """Sets the executed_sql of this QueryResult.

        SQL that was executed  # noqa: E501

        :param executed_sql: The executed_sql of this QueryResult.
        :type executed_sql: str
        """
        if executed_sql is None:
            raise ValueError("Invalid value for `executed_sql`, must not be `None`")  # noqa: E501

        self._executed_sql = executed_sql

    @property
    def error(self):
        """Gets the error of this QueryResult.

        error message recieved from database  # noqa: E501

        :return: The error of this QueryResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this QueryResult.

        error message recieved from database  # noqa: E501

        :param error: The error of this QueryResult.
        :type error: str
        """

        self._error = error

    @property
    def data(self):
        """Gets the data of this QueryResult.


        :return: The data of this QueryResult.
        :rtype: List[object]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this QueryResult.


        :param data: The data of this QueryResult.
        :type data: List[object]
        """

        self._data = data
